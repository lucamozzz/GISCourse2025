@model IEnumerable<GISCourse2025.Models.hikingTrails>

@{
    ViewData["Title"] = "HikingTrails";
    var currentPage = ViewBag.CurrentPage as int? ?? 1;
    var totalPages = ViewBag.TotalPages as int? ?? 1;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OpenLayers Line</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@latest/ol.css">
    <script src="https://cdn.jsdelivr.net/npm/ol@latest/dist/ol.js"></script>
</head>

<body>
    <table width="100%">
        <tr>
            <td width="20%" style="vertical-align: top;">
                <div style="margin-top: 20%; margin-right: 10%;">
                    <h3 style="text-align: right;">List of Hiking Trails</h3>
                    @foreach (hikingTrails m in Model)
                    {
                        <h5 style="text-align: right;">
                            <a class="text-dark" style="text-decoration: none;" href="#" onclick="loadLine(@m.id)">
                                @m.name
                            </a>
                            <a href="#" onclick="deleteLine(@m.id)"
                                style="color:red; text-decoration:none; margin-left:8px;">&#10005;</a>
                        </h5>
                    }
                </div>
            </td>
            <td valign="top">
                <h2>Hiking Trails</h2>
                <div id="map" style="width: 100%; height: 800px; float:right;"></div>
            </td>
            <td width="20%" style="vertical-align: top;">
                <div style="margin-top: 20%; margin-left: 10%;">
                    <h3>Add Hiking Trail</h3>
                    <form id="addForm" onsubmit="event.preventDefault();">
                        <label for="add_name">Name:</label><br>
                        <input type="text" id="add_name" name="add_name" required><br><br>
                        <button type="button" onclick="startDrawing()">Start Drawing</button>
                        <button type="button" onclick="clearDrawing()">Clear Drawing</button>
                        <button type="button" onclick="saveNewTrail()">Save Trail</button>
                    </form>
                </div>
                <div style="margin-top: 20%; margin-left: 10%;">
                    <h3>Update Hiking Trail</h3>
                    <form id="updateForm" onsubmit="event.preventDefault();">
                        <label for="name">Name:</label>
                        <input type="text" id="update_name" name="update_name" required><br><br>
                        <button type="button"
                            onclick="updateLine(currentID, document.getElementById('update_name').value)">Update</button>
                    </form>
                </div>
            </td>
        </tr>
    </table>

    <script>
        var map;
        var currentLayer = null;
        var currentFeature = null;
        var modify = null;
        var drawInteraction = null;
        var drawnFeature = null;
        let currentID = null; // add this at the top of your script

        function InitMap() {
            map = new ol.Map({
                target: 'map',
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM()
                    })
                ],
                view: new ol.View({
                    center: ol.proj.fromLonLat([12.5, 42.5]),
                    zoom: 8
                })
            });
        }

        function startDrawing() {
            if (drawInteraction) {
                map.removeInteraction(drawInteraction);
            }

            const vectorSource = new ol.source.Vector({ wrapX: false });
            currentLayer = new ol.layer.Vector({
                source: vectorSource
            });
            map.addLayer(currentLayer);

            drawInteraction = new ol.interaction.Draw({
                source: vectorSource,
                type: 'LineString'
            });

            drawInteraction.on('drawend', function (event) {
                drawnFeature = event.feature;
            });

            map.addInteraction(drawInteraction);
        }

        function clearDrawing() {
            if (currentLayer) {
                map.removeLayer(currentLayer);
                currentLayer = null;
            }
            if (drawInteraction) {
                map.removeInteraction(drawInteraction);
                drawInteraction = null;
            }
            drawnFeature = null;
        }

        async function saveNewTrail() {
            if (!drawnFeature) {
                alert("Please draw a line first.");
                return;
            }

            const name = document.getElementById('add_name').value;
            if (!name) {
                alert("Please enter a name.");
                return;
            }

            const geometry = drawnFeature.getGeometry().getCoordinates();
            const coordinates = geometry.map(coord => [coord[0], coord[1]]); // [x, y] (EPSG:3857)

            const body = {
                coordinates: coordinates
            };

            const response = await fetch(`../../api/hikingtrails/add?name=${encodeURIComponent(name)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(body)
            });

            if (!response.ok) {
                console.error("Failed to save new trail");
            } else {
                console.log("Trail added successfully");
                location.reload();
            }
        }

        async function loadLine(id) {
            // Get trail info (e.g., name) from an API endpoint or use the DOM if you already have the name
            const response = await fetch('../../api/hikingtrails/' + id);
            if (!response.ok) {
                console.error("Failed to load Line:" + id);
                return;
            }

            const trailData = await response.json(); // response should now return an object like { id: 1, name: "Path 1", wkt: "..." }
            const wkt = trailData.wkt;

            currentID = id;
            document.getElementById('update_name').value = trailData.name;

            // Map visualization
            var format = new ol.format.WKT();
            var feature = format.readFeature(wkt, {
                dataProjection: 'EPSG:3857',
                featureProjection: 'EPSG:3857'
            });

            currentFeature = feature;

            if (modify) {
                map.removeInteraction(modify);
            }
            modify = new ol.interaction.Modify({
                source: new ol.source.Vector({
                    features: [currentFeature]
                })
            });
            map.addInteraction(modify);

            if (currentLayer)
                map.removeLayer(currentLayer);

            currentLayer = new ol.layer.Vector({
                source: new ol.source.Vector({
                    features: [feature]
                }),
                style: new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'red',
                        width: 4
                    })
                })
            });

            map.addLayer(currentLayer);

            var extent = feature.getGeometry().getExtent();
            map.getView().fit(extent, {
                padding: [50, 50, 50, 50],
                maxZoom: 16,
                duration: 500
            });
        }

        async function updateLine(id, name) {
            if (!currentFeature) {
                console.error("No feature loaded.");
                return;
            }

            var format = new ol.format.WKT();
            var wkt = format.writeFeature(currentFeature, {
                dataProjection: 'EPSG:3857',
                featureProjection: 'EPSG:3857'
            });

            const body = {
                id: id,
                name: name,
                wkt: wkt
            };

            const response = await fetch('../../api/hikingtrails/update', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(body)
            });

            if (!response.ok) {
                console.error("Failed to update Line");
            } else {
                console.log("Line updated successfully");
                location.reload(); // ricarica per aggiornare la lista
            }
        }

        async function deleteLine(id) {
            const response = await fetch('../../api/hikingtrails/delete/' + id, {
                method: 'DELETE'
            });
            if (!response.ok) {
                console.error("Failed to delete Line");
                return;
            } else {
                console.log("Line deleted successfully");
                location.reload();
            }
        }

        InitMap();
    </script>
</body>

</html>