@model IEnumerable<GISCourse2025.Models.viewpoints>

@{
    ViewData["Title"] = "Viewpoints";
    var currentPage = ViewBag.CurrentPage as int? ?? 1;
    var totalPages = ViewBag.TotalPages as int? ?? 1;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OpenLayers Point</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@latest/ol.css">
    <script src="https://cdn.jsdelivr.net/npm/ol@latest/dist/ol.js"></script>
</head>

<body>
    <table width="100%">
        <tr>
            <td width="20%" style="vertical-align: top;">
                <div style="margin-top: 20%; margin-right: 10%;">
                    <h3 style="text-align: right;">List of Viewpoints</h3>
                    @foreach (viewpoints m in Model)
                    {
                        <h5 style="text-align: right;">
                            <a class="text-dark" style="text-decoration: none;" href="#" onclick="loadPoint(@m.id)">
                                @m.name
                            </a>
                            <a href="#" onclick="deletePoint(@m.id)"
                                style="color:red; text-decoration:none; margin-left:8px;">&#10005;</a>
                        </h5>
                    }
                </div>
            </td>
            <td valign="top">
                <h2>Viewpoints</h2>
                <div id="map" style="width: 100%; height: 800px; float:right;"></div>
            </td>
            <td width="20%" style="vertical-align: top;">
                <div style="margin-top: 20%; margin-left: 10%;">
                    <h3>Add Viewpoint</h3>
                    <form id="addForm" onsubmit="event.preventDefault();">
                        <label for="add_name">Name:</label><br>
                        <input type="text" id="add_name" name="add_name" required><br><br>
                        <button type="button" onclick="startDrawing()">Start Drawing</button>
                        <button type="button" onclick="clearDrawing()">Clear Drawing</button>
                        <button type="button" onclick="saveNewPoint()">Save Point</button>
                    </form>
                </div>
                <div style="margin-top: 20%; margin-left: 10%;">
                    <h3>Update Viewpoint</h3>
                    <form id="updateForm" onsubmit="event.preventDefault();">
                        <label for="name">Name:</label>
                        <input type="text" id="update_name" name="update_name" required><br><br>
                        <button type="button"
                            onclick="updatePoint(currentID, document.getElementById('update_name').value)">Update</button>
                    </form>
                </div>
            </td>
        </tr>
    </table>

    <script>
        var map;
        var currentLayer = null;
        var currentFeature = null;
        var modify = null;
        var drawInteraction = null;
        var drawnFeature = null;
        let currentID = null; // add this at the top of your script

        function InitMap() {
            map = new ol.Map({
                target: 'map',
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM()
                    })
                ],
                view: new ol.View({
                    center: ol.proj.fromLonLat([12.5, 42.5]),
                    zoom: 8
                })
            });
        }

        function startDrawing() {
            if (drawInteraction) {
                map.removeInteraction(drawInteraction);
            }

            const vectorSource = new ol.source.Vector({ wrapX: false });
            currentLayer = new ol.layer.Vector({
                source: vectorSource
            });
            map.addLayer(currentLayer);

            drawInteraction = new ol.interaction.Draw({
                source: vectorSource,
                type: 'Point' // ðŸ‘ˆ CAMBIATO da 'LineString'
            });

            drawInteraction.on('drawend', function (event) {
                drawnFeature = event.feature;
            });

            map.addInteraction(drawInteraction);
        }

        function clearDrawing() {
            if (currentLayer) {
                map.removeLayer(currentLayer);
                currentLayer = null;
            }
            if (drawInteraction) {
                map.removeInteraction(drawInteraction);
                drawInteraction = null;
            }
            drawnFeature = null;
        }

        async function saveNewPoint() {
            if (!drawnFeature) {
                alert("Please draw a point first.");
                return;
            }

            const name = document.getElementById('add_name').value;
            if (!name) {
                alert("Please enter a name.");
                return;
            }

            const format = new ol.format.WKT();
            const wkt = format.writeFeature(drawnFeature, {
                dataProjection: 'EPSG:3857',
                featureProjection: 'EPSG:3857'
            });

            const body = {
                wkt: wkt
            };

            const response = await fetch(`../../api/viewpoints/add?name=${encodeURIComponent(name)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(body)
            });

            if (!response.ok) {
                console.error("Failed to save new point");
            } else {
                console.log("Point added successfully");
                location.reload();
            }
        }

        async function loadPoint(id) {
            const response = await fetch('../../api/viewpoints/' + id);
            if (!response.ok) {
                console.error("Failed to load Point: " + id);
                return;
            }

            const viewpointData = await response.json();
            const wkt = viewpointData.wkt;

            currentID = id;
            document.getElementById('update_name').value = viewpointData.name;

            var format = new ol.format.WKT();
            var feature = format.readFeature(wkt, {
                dataProjection: 'EPSG:3857',
                featureProjection: 'EPSG:3857'
            });

            currentFeature = feature;

            if (modify) {
                map.removeInteraction(modify);
                modify = null;
            }

            if (currentLayer)
                map.removeLayer(currentLayer);

            currentLayer = new ol.layer.Vector({
                source: new ol.source.Vector({
                    features: [feature]
                }),
                style: new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 7,
                        fill: new ol.style.Fill({ color: 'red' }),
                        stroke: new ol.style.Stroke({ color: 'white', width: 2 })
                    })
                })
            });

            map.addLayer(currentLayer);

            modify = new ol.interaction.Modify({
                source: currentLayer.getSource()
            });
            map.addInteraction(modify);
            modify.on('modifyend', function (event) {
                event.features.forEach(function (feature) {
                    currentFeature = feature;
                });
            });

            const extent = feature.getGeometry().getExtent();
            map.getView().fit(extent, {
                padding: [50, 50, 50, 50],
                maxZoom: 18,
                duration: 500
            });
        }

        async function updatePoint(id, name) {
            if (!currentFeature) {
                console.error("No feature loaded.");
                return;
            }

            var format = new ol.format.WKT();
            var wkt = format.writeFeature(currentFeature, {
                dataProjection: 'EPSG:3857',
                featureProjection: 'EPSG:3857'
            });

            const body = {
                id: id,
                name: name,
                wkt: wkt
            };

            const response = await fetch('../../api/viewpoints/update', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(body)
            });

            if (!response.ok) {
                console.error("Failed to update point");
            } else {
                console.log("Point updated successfully");
                location.reload();
            }
        }

        async function deletePoint(id) {
            const response = await fetch('../../api/viewpoints/delete/' + id, {
                method: 'DELETE'
            });
            if (!response.ok) {
                console.error("Failed to delete point");
                return;
            } else {
                console.log("Point deleted successfully");
                location.reload();
            }
        }

        InitMap();
    </script>
</body>

</html>